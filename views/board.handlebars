<link href="https://fonts.googleapis.com/css2?family=Nunito&display=swap" rel="stylesheet">


<div id="readonlybanner"
    class="mx-auto text-center text-white bg-info align-items-center justify-content-center flex-column"
    style="height:2.5rem; display:none;">
    <p class="p-0 m-0 font-weight-bold">Read Only Access</p>
    <small class="p-0 font-weight-bold" style="margin-top: -0.4rem; font-size:11px">(You are not a collaborator)</small>
</div>
<div class="boardtitle-container text-center position-relative mt-2">
    <h1 id="boardtitle" style="display:inline">Board Name</h1>
    <a class="position-absolute pl-2" style="top:25%;cursor:pointer;" data-toggle="modal"
        data-target="#boardedit-modal">
        <i style="color:lightgray; font-size: 28px;" class="fas fa-edit hidereadonly"></i>
    </a>
</div>
<h5 id="boarddesc" class="text-center font-weight-light mt-1"></h5>

{{> modal-edittask}}
{{> modal-editboard}}
{{> modal-addcollab}}
{{> modal-addtask}}

<div class="mx-auto p-5 d-flex justify-content-center flex-column text-center" style="width:95%">
    <div class="collab-container shadow mb-3">
        <h5 class="text-center font-weight-light" style="display:inline;">Collabarators</h5>&nbsp;
        <a style="color: black; cursor:pointer;" data-toggle="modal" data-target="#addcollab-modal"><i
                class="fas fa-plus hidereadonly"></i></a>
        <div id="collabapp"></div>
    </div>
    <button type="button" class="hidereadonly addtask-btn btn m-4 mx-auto" data-toggle="modal"
        data-target="#addtask-modal">
        Add Task âœ”
    </button>
    <div class="d-flex flex-row flex-wrap justify-content-around" id="app"> </div>
    <div class="hidereadonly trashicon-container rounded-circle shadow p-4 mx-auto"
        style="margin-top:2rem; width:7rem; height:7rem; cursor:pointer;" ondragover="event.preventDefault()"
        ondrop="app.run('dropDelete', event)">
        <div class="imageicon"
            style="background-image: url('https://icons-for-free.com/iconfiles/png/512/delete+remove+trash+trash+bin+trash+can+icon-1320073117929397588.png');">
        </div>
    </div>
</div>

<script src="/modalevents.js"></script>

<script>
    const boardid = window.location.pathname.split('/')[2]
    const userid = getCookie("userid")
    let readonly = false;
    const state = {
        tasks: [],
        board: {}
    };
    const view = state => `{{> MainTasksView tasks="state.tasks"}}`;
    const collabview = state => `{{> CollabUserBar}}`
    const update = {
        getTasks: async (state, voidSocketsBroadcast) => {
            state.tasks = await fetch(`/api/board/${boardid}/tasks`).then(res => res.json())
            console.log(state.tasks)
            $(function () {
                $('[data-toggle="tooltip"]').tooltip()
            })
            if (!voidSocketsBroadcast) {
                socket.emit('update-tasks', boardid);
            }
            return state
        },
        dragStart: (state, event) => {
            const id = event.target.id
            event.dataTransfer.setData('text', id)
            console.log("dragging", id)
            return state
        },
        dropDelete: (state, event) => {
            if (event.preventDefault) { event.preventDefault(); }
            if (event.stopPropagation) { event.stopPropagation(); }
            const id = event.dataTransfer.getData('text')
            const userid = event.dataTransfer.getData('text').split("-")[1]
            console.log("dropped", id)
            if (id.includes("user")) {
                if (Object.keys(state.board.users).length == 1) {
                    toastr.error("Cannot Delete Last Collaborator from a Board", "Warning")
                    //alert("Cannot Delete Last Collaborator from a Board")
                    return state
                }
                const postRequest = {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }
                fetch(`/api/board/${boardid}/removeuser/${userid}`, postRequest).then(() => { app.run('getBoard'); app.run('getTasks') })
            } else {
                const index = state.tasks.findIndex(task => task.id == id)
                state.tasks.splice(index, 1)
                const postRequest = {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }
                fetch(`/api/task/${id}/delete`, postRequest).then(() => app.run('getTasks'))
            }
            return state
        },
        dropToDo: (state, event) => {
            if (event.preventDefault) { event.preventDefault(); }
            if (event.stopPropagation) { event.stopPropagation(); }
            const id = event.dataTransfer.getData('text')
            //  { { !-- const task = state.tasks.find(task => task.id == id)-- } }
            // { { !--task.state == 0 -- } }
            const postRequest = {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ state: 0 })
            }
            fetch(`/api/task/${id}`, postRequest).then(() => app.run('getTasks')).catch(err => console.log('yikes' + err));
            return state
        },
        dropInProgress: (state, event) => {
            if (event.preventDefault) { event.preventDefault(); }
            if (event.stopPropagation) { event.stopPropagation(); }
            const id = event.dataTransfer.getData('text')
            //{ { !-- const task = state.tasks.find(task => task.id == id)-- } }
            //{ { !--task.state == 1 -- } }
            const postRequest = {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ state: 1 })
            }
            fetch(`/api/task/${id}`, postRequest).then(() => app.run('getTasks')).catch(err => console.log('yikes' + err));
            return state
        },
        dropDone: (state, event) => {
            if (event.preventDefault) { event.preventDefault(); }
            if (event.stopPropagation) { event.stopPropagation(); }
            const id = event.dataTransfer.getData('text')
            //   { { !-- const task = state.tasks.find(task => task.id == id)-- } }
            //   { { !--task.state == 2 -- } }
            const postRequest = {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ state: 2 })
            }
            fetch(`/api/task/${id}`, postRequest).then(() => app.run('getTasks')).catch(err => console.log('yikes' + err));
            return state
        },
        dropCollab: (state, event) => {
            if (event.preventDefault) { event.preventDefault(); }
            if (event.stopPropagation) { event.stopPropagation(); }
            const userid = event.dataTransfer.getData('text').split("-")[1]
            const taskid = ($(event.target).prop("tagName") == "H4") ? $(event.target).parent().parent().parent().attr('id') : $(event.target).parent().parent().attr('id')
            const postRequest = {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            }
            fetch(`/api/task/${taskid}/assign/${userid}`, postRequest).then(() => app.run('getTasks'))
            return state
        }
    };
    const boardUpdate = {
        getBoard: async (state, voidSocketsBroadcast) => {
            state.board = await fetch(`/api/board/${boardid}`).then(res => res.json())
            console.log(state.board.users)
            $(function () {
                $('[data-toggle="tooltip"]').tooltip()
            })
            readonly = (state.board.users.find(user => user.id == userid)) ? false : true
            document.querySelector("#boardtitle").innerText = state.board.title
            document.querySelector("#boarddesc").innerText = state.board.desc
            document.querySelector("#readonlybanner").style.display = (readonly) ? "flex" : "none"
            $('.hidereadonly').each(function () { this.style.display = (readonly) ? "none" : "inline-block" })
            $('li').each(function () { this.style.cursor = (readonly) ? "normal" : "pointer" })

            if (!voidSocketsBroadcast) {
                socket.emit('update-board', boardid);
            }

            return state
        }
    }
    app.start("app", state, view, update);
    app.start("collabapp", state, collabview, boardUpdate);
    app.run('getTasks', true)
    app.run('getBoard' , true)



    socket.on('update-board', function (id) {
        if (id == boardid) {
            app.run('getBoard', true)
        }
    })

    socket.on('update-tasks', function (id) {
        if (id == boardid) {
            app.run('getTasks', true)
        }
    })

</script>

<style>
    * {
        font-family: 'Nunito', sans-serif;
    }

    .grabbable {
        cursor: move;
        /* fallback if grab cursor is unsupported */
        cursor: grab;
        cursor: -moz-grab;
        cursor: -webkit-grab;
    }

    /* (Optional) Apply a "closed-hand" cursor during drag operation. */
    .grabbable:active {
        cursor: grabbing !important;
        cursor: -moz-grabbing;
        cursor: -webkit-grabbing;
    }

    #boarddesc {
        margin-bottom: -16px;
    }

    .addtask-btn {
        background-color: #8cc076;
        color: #fff;
        font-weight: 900;
    }

    .addtask-btn:hover {
        color: #fff;
        opacity: 0.85;
    }

    .collab-container {
        width: 100%;
        height: 6rem;
        border-top-right-radius: 2rem;
        border-bottom-left-radius: 2rem;
        margin-bottom: 8px;
    }

    .imageicon {
        background-position: center;
        background-size: cover;
        width: 100%;
        height: 100%;
    }

    .trashicon-container {
        transition-timing-function: ease-in-out;
        transition-duration: 0.1s;
    }

    .trashicon-container:hover {
        transform: translateY(-5px) scale(1.1);
        box-shadow: 0 .125rem .25rem rgba(0, 0, 0, .075) !important;
    }

    #app {
        display: grid;
        grid-template-columns: auto;
        gap: 1rem;
    }

    /* css for mobile goes here */
    @media screen and (min-width: 40em) {

        /* css for mid screens goes here */
        #app {
            grid-template-columns: auto auto;
        }
    }

    @media screen and (min-width: 60em) {

        /* css for massive screens goes here */
        #app {
            grid-template-columns: auto auto auto;
        }
    }
</style>