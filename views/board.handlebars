<h1 id="boardtitle" class="text-center">Board Name</h1>
<h5 id="boarddesc" class="text-center font-weight-light"></h5>


<div class="mx-auto p-5 d-flex justify-content-center flex-column text-center" style="width:95%">
    <div class="collab-container shadow mb-5">
        <h5 class="text-center font-weight-light" style="display:inline;">Collabarators</h5>&nbsp;
        <a href="" style="color: black;"><i class="fas fa-plus"></i></a>
        <div id="collabapp"></div>
    </div>
    <div class="trashicon-container rounded-circle shadow p-4 mx-auto"
        style="margin-bottom:2rem; width:7rem; height:7rem; cursor:pointer;">
        <div class="imageicon"
            style="background-image: url('https://icons-for-free.com/iconfiles/png/512/add+48px-131985189471868692.png');">
        </div>
    </div>
    <div class="d-flex flex-row flex-wrap justify-content-around" id="app"> </div>
    <div class="trashicon-container rounded-circle shadow p-4 mx-auto"
        style="margin-top:2rem; width:7rem; height:7rem; cursor:pointer;"
        ondragover="event.preventDefault()"
        ondrop="app.run('dropDelete', event)">
        <div class="imageicon"
            style="background-image: url('https://icons-for-free.com/iconfiles/png/512/delete+remove+trash+trash+bin+trash+can+icon-1320073117929397588.png');">
        </div>
    </div>
</div>

<script>
    const boardid = window.location.pathname.split('/')[2]
    const state = {
        tasks: [],
        board: {}
    };
    const view = state => `{{> MainTasksView tasks="state.tasks"}}`;
    const collabview = state => `{{> CollabUserBar}}`
    const update = {
        getTasks: async (state) => {
            state.tasks = await fetch(`/api/board/${boardid}/tasks`).then(res => res.json())
            console.log(state.tasks)
            $(function () {
                $('[data-toggle="tooltip"]').tooltip()
            })
            return state
        },
        dragStart: (state, event) => {
            const id = event.target.id
            event.dataTransfer.setData('text', id)
            console.log("dragging", id)
            return state
        },
        dropDelete: (state, event) => {
            const id = event.dataTransfer.getData('text')
            const index = state.tasks.findIndex(task => task.id == id)
            state.tasks.splice(index, 1)
            console.log("dropped", id)
            const postRequest = {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        }
            fetch(`/api/task/${id}/delete`, postRequest).then(() => app.run('getTasks'))
            return state
        },
        dropToDo: (state, event) => {
            const id = event.dataTransfer.getData('text')
            {{!-- const task = state.tasks.find(task => task.id == id) --}}
            {{!-- task.state == 0 --}}
            const postRequest = {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({state: 0})
        }
            fetch(`/api/task/${id}`, postRequest).then(() => app.run('getTasks'))
            return state
        },
        dropInProgress: (state, event) => {
            const id = event.dataTransfer.getData('text')
            {{!-- const task = state.tasks.find(task => task.id == id) --}}
            {{!-- task.state == 1 --}}
            const postRequest = {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({state: 1})
        }
            fetch(`/api/task/${id}`, postRequest).then(() => app.run('getTasks'))
            return state
        },
        dropDone: (state, event) => {
            const id = event.dataTransfer.getData('text')
            {{!-- const task = state.tasks.find(task => task.id == id) --}}
            {{!-- task.state == 2 --}}
            const postRequest = {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({state: 2})
        }
            fetch(`/api/task/${id}`, postRequest).then(() => app.run('getTasks'))
            return state
        }
    };
    const boardUpdate = {
        getBoard: async (state) => {
            state.board = await fetch(`/api/board/${boardid}`).then(res => res.json())
            console.log(state.board.users)
            $(function () {
                $('[data-toggle="tooltip"]').tooltip()
            })
            document.querySelector("#boardtitle").innerText = state.board.title
            document.querySelector("#boarddesc").innerText = state.board.desc
            return state
        }
    }
    app.start("app", state, view, update);
    app.start("collabapp", state, collabview, boardUpdate);
    app.run('getTasks')
    app.run('getBoard')

</script>

<style>
    .collab-container {
        width: 100%;
        height: 6rem;
        border-top-right-radius: 2rem;
        border-bottom-left-radius: 2rem;
    }

    .imageicon {
        background-position: center;
        background-size: cover;
        width: 100%;
        height: 100%;
    }

    .trashicon-container {
        transition-timing-function: ease-in-out;
        transition-duration: 0.1s;
    }

    .trashicon-container:hover {
        transform: translateY(-5px) scale(1.1);
        box-shadow: 0 .125rem .25rem rgba(0, 0, 0, .075) !important;
    }
</style>