<div class="form">
    <div id="app">
    </div>
</div>
<script src="/loginsignup.js" defer>
</script>

<script type="module">

    import app, { Component } from 'https://unpkg.com/apprun@es6/esm/apprun-html?module';

    class usericons extends Component {
        state = { users: [], allusers: [], activeuserid: 0, activeusername: "" }
        view = state => `
        <div class="d-flex flex-wrap justify-content-around overflow-auto p-2" style="max-height:10rem">
        ${state.users.map(user => `{{> loginicons name='${user.name}' avatar='${user.avatar}' userid='${user.id}' username='${user.username}'}}`).join("")}
        </div>
        `
        update = {
            '#loadusers': async (state) => {
                const reqresult = await fetch('/api/users')
                const users = await reqresult.json()
                state.users = users
                state.allusers = users
                return state
            },
            '#searchusers': async (state) => {
                state.users = state.allusers.filter(user => user.username.includes($('#login-username').val()))
                return state
            },
            '#setactive': (state, id, username) => {
                console.log(id)
                state.activeuserid = id
                state.activeusername = username
                return state
            }
        }
        rendered = state => {
            // $('#login-username').tooltip({
            //     selector: '[data-toggle="tooltip"]'
            // })
            $(`#user-${state.activeuserid}`).addClass('activeuser')
            $('[tippy="true"]').each(function () {
                tippy(this, {
                    theme: 'forest',
                    arrow: true,
                    followCursor: 'horizontal',
                    content: this.title
                });
            })

        }
    }

    class apprunForm extends Component {
        state = {
            loginstate: true
        }
        view = state => `${(state.loginstate) ? `{{> loginform}}` : `{{> signupform }}`}`
        update = {
            '#login': async (state) => {
                state.loginstate = true
                return state
            },
            '#signup': (state) => {
                state.loginstate = false
                return state
            }
        }
        rendered = async state => {
            if (state.loginstate) {
                console.log(document.getElementById('userapp'))
                usericons_intstance.start(document.getElementById('userapp'))
                app.run('#loadusers')
            }
            return state
        };
    }
    const usericons_intstance = new usericons()
    new apprunForm().start(document.getElementById("app"))
</script>

<script>
    function passcode(e) {
        const passlocation = e.target.id.slice(-1)
        if (e.key.match("^[0-9]")) {
            if (passlocation < 4) {
                $(`#passcode-${parseInt(passlocation)}`).val(e.key)
                $(`#passcode-${parseInt(passlocation) + 1}`).focus()
            }
        }
    }
    function passcode_back(e) {
        const passlocation = e.target.id.slice(-1)
        if (e.key == "Backspace" || e.key == "ArrowLeft") {
            if (passlocation > 1) {
                $(`#passcode-${parseInt(passlocation) - 1}`).focus()
            }
        } else if (e.key == "ArrowRight") {
            if (passlocation < 4) {
                $(`#passcode-${parseInt(passlocation) + 1}`).focus()
            }
        }
    }
</script>


<style>
    body {
        background: url("https://cdn.dribbble.com/users/1162077/screenshots/3029551/workspace2.jpg") no-repeat center center fixed;
        background-size: cover;
    }

    body::after {
        opacity: 0.8;
    }

    .activeuser {
        border: 4px solid lime;
    }
</style>

{{!-- 
<script>
    let user_usernames = []
    async function getAllUsers() {
        const reqresult = await fetch('/api/users')
        const users = await reqresult.json()
        user_usernames = users.map(user => user.username)
        autocomplete(document.getElementById("login-username"), user_usernames);
    }
</script> --}}


<script>
    function autocomplete(inp, arr) {
        /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
        var currentFocus;
        /*execute a function when someone writes in the text field:*/
        inp.addEventListener("input", function (e) {
            var a, b, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            if (!val) { return false; }
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(a);
            /*for each item in the array...*/
            for (i = 0; i < arr.length; i++) {
                /*check if the item starts with the same letters as the text field value:*/
                if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                    /*create a DIV element for each matching element:*/
                    b = document.createElement("DIV");
                    /*make the matching letters bold:*/
                    b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                    b.innerHTML += arr[i].substr(val.length);
                    /*insert a input field that will hold the current array item's value:*/
                    b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                    /*execute a function when someone clicks on the item value (DIV element):*/
                    b.addEventListener("click", function (e) {
                        /*insert the value for the autocomplete text field:*/
                        inp.value = this.getElementsByTagName("input")[0].value;
                        /*close the list of autocompleted values,
                        (or any other open lists of autocompleted values:*/
                        closeAllLists();
                    });
                    a.appendChild(b);
                }
            }
        });
        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function (e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                    /*and simulate a click on the "active" item:*/
                    if (x) x[currentFocus].click();
                }
            }
        });
        function addActive(x) {
            /*a function to classify an item as "active":*/
            if (!x) return false;
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            /*add class "autocomplete-active":*/
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
        function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }
        /*execute a function when someone clicks in the document:*/
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }
</script>

<style>
    .autocomplete-items {
        position: absolute;
        border: 1px solid #d4d4d4;
        border-bottom: none;
        border-top: none;
        z-index: 99;
        /*position the autocomplete items to be the same width as the container:*/
        top: 100%;
        left: 0;
        right: 0;
    }

    .autocomplete-items div {
        padding: 10px;
        cursor: pointer;
        background-color: #fff;
        border-bottom: 1px solid #d4d4d4;
    }

    .autocomplete-items div:hover {
        /*when hovering an item:*/
        background-color: #e9e9e9;
    }

    .autocomplete-active {
        /*when navigating through the items using the arrow keys:*/
        background-color: DodgerBlue !important;
        color: #ffffff;
    }
</style>